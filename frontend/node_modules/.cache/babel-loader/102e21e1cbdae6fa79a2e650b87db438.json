{"ast":null,"code":"import axios from 'axios';\n\n//remove before pushing to production branch\nconst sleep = delay => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = 'http://oddbbsrv01:5000/api'; //fake delay\n\naxios.interceptors.response.use(async response => {\n  try {\n    await sleep(2000);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return await Promise.reject(error);\n  }\n});\n\nconst responseBody = response => response.data;\n\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url).then(responseBody),\n  put: (url, body) => axios.put(url).then(responseBody),\n  del: url => axios.delete(url).then(responseBody)\n};\nconst Activities = {\n  list: () => requests.get('/activities'),\n  details: id => requests.get(`/activities/${id}`),\n  create: activity => requests.post('/activities/', activity),\n  update: activity => requests.put(`/activities/${activity.id}`, activity),\n  delete: id => requests.del(`/activities/${id}`)\n};\nconst agent = {\n  Activities\n};\nexport default agent;","map":{"version":3,"sources":["/home/gm/Downloads/reactivities/frontend/src/app/api/agent.ts"],"names":["axios","sleep","delay","Promise","resolve","setTimeout","defaults","baseURL","interceptors","response","use","error","console","log","reject","responseBody","data","requests","get","url","then","post","body","put","del","delete","Activities","list","details","id","create","activity","update","agent"],"mappings":"AAAA,OAAOA,KAAP,MAA4C,OAA5C;;AAGA;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAmB;AAChC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC/BC,IAAAA,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAV;AACA,GAFM,CAAP;AAGA,CAJD;;AAMAF,KAAK,CAACM,QAAN,CAAeC,OAAf,GAAyB,4BAAzB,C,CAEA;;AACAP,KAAK,CAACQ,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,MAAOD,QAAP,IAAoB;AACnD,MAAI;AACH,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,WAAOQ,QAAP;AACA,GAHD,CAGE,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,MAAMR,OAAO,CAACW,MAAR,CAAeH,KAAf,CAAb;AACA;AACD,CARD;;AAUA,MAAMI,YAAY,GAAON,QAAJ,IAAmCA,QAAQ,CAACO,IAAjE;;AAEA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,GAAG,EAAMC,GAAJ,IAAoBnB,KAAK,CAACkB,GAAN,CAAaC,GAAb,EAAkBC,IAAlB,CAAuBL,YAAvB,CADT;AAEhBM,EAAAA,IAAI,EAAE,CAAIF,GAAJ,EAAiBG,IAAjB,KAA8BtB,KAAK,CAACqB,IAAN,CAAcF,GAAd,EAAmBC,IAAnB,CAAwBL,YAAxB,CAFpB;AAGhBQ,EAAAA,GAAG,EAAE,CAAIJ,GAAJ,EAAiBG,IAAjB,KAA8BtB,KAAK,CAACuB,GAAN,CAAaJ,GAAb,EAAkBC,IAAlB,CAAuBL,YAAvB,CAHnB;AAIhBS,EAAAA,GAAG,EAAML,GAAJ,IAAoBnB,KAAK,CAACyB,MAAN,CAAgBN,GAAhB,EAAqBC,IAArB,CAA0BL,YAA1B;AAJT,CAAjB;AAOA,MAAMW,UAAU,GAAG;AAClBC,EAAAA,IAAI,EAAE,MAAMV,QAAQ,CAACC,GAAT,CAAyB,aAAzB,CADM;AAElBU,EAAAA,OAAO,EAAGC,EAAD,IAAgBZ,QAAQ,CAACC,GAAT,CAAwB,eAAcW,EAAG,EAAzC,CAFP;AAGlBC,EAAAA,MAAM,EAAGC,QAAD,IAAwBd,QAAQ,CAACI,IAAT,CAAoB,cAApB,EAAoCU,QAApC,CAHd;AAIlBC,EAAAA,MAAM,EAAGD,QAAD,IAAwBd,QAAQ,CAACM,GAAT,CAAc,eAAcQ,QAAQ,CAACF,EAAG,EAAxC,EAA2CE,QAA3C,CAJd;AAKlBN,EAAAA,MAAM,EAAGI,EAAD,IAAgBZ,QAAQ,CAACO,GAAT,CAAc,eAAcK,EAAG,EAA/B;AALN,CAAnB;AAQA,MAAMI,KAAK,GAAG;AACbP,EAAAA;AADa,CAAd;AAIA,eAAeO,KAAf","sourcesContent":["import axios, { Axios, AxiosResponse } from 'axios';\nimport { Activity } from '../models/Activity';\n\n//remove before pushing to production branch\nconst sleep = (delay: number) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, delay);\n\t});\n};\n\naxios.defaults.baseURL = 'http://oddbbsrv01:5000/api';\n\n//fake delay\naxios.interceptors.response.use(async (response) => {\n\ttry {\n\t\tawait sleep(2000);\n\t\treturn response;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\treturn await Promise.reject(error);\n\t}\n});\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n\tget: <T>(url: string) => axios.get<T>(url).then(responseBody),\n\tpost: <T>(url: string, body: {}) => axios.post<T>(url).then(responseBody),\n\tput: <T>(url: string, body: {}) => axios.put<T>(url).then(responseBody),\n\tdel: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n};\n\nconst Activities = {\n\tlist: () => requests.get<Activity[]>('/activities'),\n\tdetails: (id: string) => requests.get<Activity>(`/activities/${id}`),\n\tcreate: (activity: Activity) => requests.post<void>('/activities/', activity),\n\tupdate: (activity: Activity) => requests.put(`/activities/${activity.id}`, activity),\n\tdelete: (id: string) => requests.del(`/activities/${id}`)\n};\n\nconst agent = {\n\tActivities\n};\n\nexport default agent;\n"]},"metadata":{},"sourceType":"module"}