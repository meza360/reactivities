{"ast":null,"code":"import { makeAutoObservable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nexport default class ActivityStore {\n  constructor() {\n    this.activities = [];\n    this.selectedActivity = null;\n    this.editMode = false;\n    this.loading = false;\n    this.loadingInitial = false;\n\n    this.loadActivities = async () => {\n      //el codigo asincrono se ejecuta fuera del bloque trycatch\n      this.setLoadingInitial(true);\n\n      try {\n        //codigo asincrono sera dentro del bloqye trycatch\n        const activities = await agent.Activities.list();\n        activities.forEach(activity => {\n          activity.date = activity.date.split('T')[0];\n          this.activities.push(activity);\n        });\n        this.setLoadingInitial(false);\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.setLoadingInitial(false);\n        });\n      }\n    };\n\n    this.setLoadingInitial = state => {\n      this.loadingInitial = state;\n    };\n\n    makeAutoObservable(this);\n  }\n\n}","map":{"version":3,"sources":["/home/gm/Downloads/reactivities/frontend/src/app/stores/activityStore.ts"],"names":["makeAutoObservable","runInAction","agent","ActivityStore","constructor","activities","selectedActivity","editMode","loading","loadingInitial","loadActivities","setLoadingInitial","Activities","list","forEach","activity","date","split","push","error","console","log","state"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAGA,eAAe,MAAMC,aAAN,CAAoB;AAOlCC,EAAAA,WAAW,GAAG;AAAA,SANdC,UAMc,GANW,EAMX;AAAA,SALdC,gBAKc,GALsB,IAKtB;AAAA,SAJdC,QAIc,GAJH,KAIG;AAAA,SAHdC,OAGc,GAHJ,KAGI;AAAA,SAFdC,cAEc,GAFG,KAEH;;AAAA,SAIdC,cAJc,GAIG,YAAY;AAC5B;AAEA,WAAKC,iBAAL,CAAuB,IAAvB;;AACA,UAAI;AACH;AACA,cAAMN,UAAU,GAAG,MAAMH,KAAK,CAACU,UAAN,CAAiBC,IAAjB,EAAzB;AAEAR,QAAAA,UAAU,CAACS,OAAX,CAAoBC,QAAD,IAAc;AAChCA,UAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAhB;AACA,eAAKZ,UAAL,CAAgBa,IAAhB,CAAqBH,QAArB;AACA,SAHD;AAIA,aAAKJ,iBAAL,CAAuB,KAAvB;AACA,OATD,CASE,OAAOQ,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAlB,QAAAA,WAAW,CAAC,MAAM;AACjB,eAAKU,iBAAL,CAAuB,KAAvB;AACA,SAFU,CAAX;AAGA;AACD,KAvBa;;AAAA,SAyBdA,iBAzBc,GAyBOW,KAAD,IAAoB;AACvC,WAAKb,cAAL,GAAsBa,KAAtB;AACA,KA3Ba;;AACbtB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AATiC","sourcesContent":["import { makeAutoObservable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { Activity } from '../models/Activity';\n\nexport default class ActivityStore {\n\tactivities: Activity[] = [];\n\tselectedActivity: Activity | null = null;\n\teditMode = false;\n\tloading = false;\n\tloadingInitial = false;\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tloadActivities = async () => {\n\t\t//el codigo asincrono se ejecuta fuera del bloque trycatch\n\n\t\tthis.setLoadingInitial(true);\n\t\ttry {\n\t\t\t//codigo asincrono sera dentro del bloqye trycatch\n\t\t\tconst activities = await agent.Activities.list();\n\n\t\t\tactivities.forEach((activity) => {\n\t\t\t\tactivity.date = activity.date.split('T')[0];\n\t\t\t\tthis.activities.push(activity);\n\t\t\t});\n\t\t\tthis.setLoadingInitial(false);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\trunInAction(() => {\n\t\t\t\tthis.setLoadingInitial(false);\n\t\t\t});\n\t\t}\n\t};\n\n\tsetLoadingInitial = (state: boolean) => {\n\t\tthis.loadingInitial = state;\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}